name: "steadybit/definitions/experiments/loose-coupling-to-dependency-during-startup"
type: experiment
description: > 
  Kubernetes deployment's pods can become ready when dependent services are unreachable.
  Use this verify that deployment's pods have a loose coupling to dependent services during startup.
inputs:
  - name: environmentName
  - name: teamKey
  - name: k8sClusterName
  - name: k8sNamespaceName
  - name: k8sDeploymentName
  - name: k8sDependencyClusterName
  - name: k8sDependencyNamespaceName
  - name: k8sDependencyDeploymentName
experiment:
  name: "{{k8sNamespaceName}}/{{k8sDeploymentName}} startup loose coupling to {{k8sDependencyNamespaceName}}/{{k8sDependencyDeploymentName}}"
  hypothesis: "When {{k8sDependencyNamespaceName}}/{{k8sDependencyDeploymentName}} is not reachable for {{k8sDeploymentName}}, {{k8sDeploymentName}} is still able to startup successfully"
  environment: "{{environmentName}}"
  team: "{{teamKey}}"
  lanes:
    - steps:
        - type: action
          actionType: check:kubernetes-pod-count
          customLabel: 'GIVEN: All pods are available'
          parameters:
            duration: 10s
            cluster: "{{k8sClusterName}}"
            namespace: "{{k8sNamespaceName}}"
            deployment: "{{k8sDeploymentName}}"
            podcount: podCountEqualsDesiredCount
        - type: attack
          parameters:
            duration: 3m
          attackType: container-network-blackhole-attack
          radius:
            targetType: container
            percentage: 100
            query:
              operator: AND
              predicates:
                - key: k8s.cluster-name
                  operator: EQUALS
                  values:
                    - "{{k8sDependencyClusterName}}"
                - key: k8s.namespace
                  operator: EQUALS
                  values:
                    - "{{k8sDependencyNamespaceName}}"
                - key: k8s.deployment
                  operator: EQUALS
                  values:
                    - "{{k8sDependencyDeploymentName}}"
    - steps:
        - type: wait
          parameters:
            duration: 20s
        - type: attack
          attackType: container-stop-attack
          parameters:
            graceful: 'true'
          radius:
            targetType: container
            maximum: 1
            query:
              operator: AND
              predicates:
                - key: k8s.cluster-name
                  operator: EQUALS
                  values:
                    - "{{k8sClusterName}}"
                - key: k8s.namespace
                  operator: EQUALS
                  values:
                    - "{{k8sNamespaceName}}"
                - key: k8s.deployment
                  operator: EQUALS
                  values:
                    - "{{k8sDeploymentName}}"
        - type: action
          actionType: check:kubernetes-pod-count
          customLabel: 'THEN: All pods are available'
          parameters:
            duration: 2m
            cluster: "{{k8sClusterName}}"
            namespace: "{{k8sNamespaceName}}"
            deployment: "{{k8sDeploymentName}}"
            podcount: podCountEqualsDesiredCount
